#version 460
#extension GL_EXT_ray_tracing : enable

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;
layout(binding = 2, set = 0) uniform CameraProperties 
{
	mat4 viewInverse;
	mat4 projInverse;
} cameraProperties;

const int ColorIndex = 0;

struct RayPayload {
    vec3 color;
    float distance;
    vec3 normal;
    float reflectiveness;
};

layout(location = ColorIndex) rayPayloadEXT RayPayload rayPayload;

void main() 
{
	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
	vec2 d = inUV * 2.0 - 1.0;

	vec4 origin = cameraProperties.viewInverse * vec4(0,0,0,1);
	vec4 target = cameraProperties.projInverse * vec4(d.x, d.y, 1, 1) ;
	vec4 direction = cameraProperties.viewInverse*vec4(normalize(target.xyz), 0) ;

	const float tMin = 0.001;
	const float tMax = 10000.0;

	vec3 color = vec3(0.0);

	const uint MaxReflectionBounces = 4;
	for (uint i = 0; i < MaxReflectionBounces; i++) {
		traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin.xyz, tMin, direction.xyz, tMax, 0);
		if (rayPayload.distance < 0.0) {
			break;
		} else if (rayPayload.reflectiveness > 0.0) {
			const vec4 hitPos = origin + direction * rayPayload.distance;
			origin.xyz = hitPos.xyz + rayPayload.normal * 0.001f;
			direction.xyz = reflect(direction.xyz, rayPayload.normal);
			color += rayPayload.color * (1.0 - rayPayload.reflectiveness);
		} else {
			color += rayPayload.color;
			break;
		}
	}

	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 0.0));
}
