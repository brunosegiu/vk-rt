#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_GOOGLE_include_directive : enable

#include "definitions.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;
layout(binding = 2, set = 0) uniform CameraProperties {
    mat4 viewInverse;
    mat4 projInverse;
}
cameraProperties;

layout(location = ColorPayloadIndex) rayPayloadEXT RayPayload rayPayload;

vec3 linearToSRGB(vec3 linear) {
    bvec3 cutoff = lessThan(linear, vec3(0.0031308));
    vec3 higher = vec3(1.055) * pow(linear, vec3(1.0 / 2.4)) - vec3(0.055);
    vec3 lower = linear * vec3(12.92);

    return mix(higher, lower, cutoff);
}

void main() {
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;

    vec3 origin = (cameraProperties.viewInverse * vec4(0, 0, 0, 1)).xyz;
    vec4 target = cameraProperties.projInverse * vec4(d.x, d.y, 1, 1);
    vec3 direction = (cameraProperties.viewInverse * vec4(normalize(target.xyz), 0)).xyz;

    rayPayload.color = vec3(0.0f);
    rayPayload.position = vec3(0.0f);
    rayPayload.normal = vec3(0.0f);
    rayPayload.metallic = 0.0f;
    rayPayload.indexOfRefraction = 0.0f;

    vec3 color = vec3(0.0f);
    float weight = 1.0f;

    for (uint level = 0; level < MaxRecursionLevel; +level) {
        traceRayEXT(
            topLevelAS,
            gl_RayFlagsOpaqueEXT,
            DefaultCullMask,
            DefaultSBTOffset,
            DefaultSBTStride,
            ColorMissIndex,
            origin,
            TMin,
            direction,
            TMax,
            ColorPayloadIndex);

        color += rayPayload.color * weight;

        const float metallic = rayPayload.metallic;
        const float indexOfRefraction = rayPayload.indexOfRefraction;

        if (metallic > 0.0f) {
            weight *= rayPayload.metallicFalloff;
            origin = rayPayload.position;
            direction = reflect(direction, rayPayload.normal);
        } else if (indexOfRefraction > 0.0f) {
            const float nDotD = dot(rayPayload.normal, direction);
            vec3 refrNormal;
            float refrEta;
            if (nDotD > 0.0f) {
                refrNormal = -rayPayload.normal;
                refrEta = indexOfRefraction;
            } else {
                refrNormal = rayPayload.normal;
                refrEta = 1.0f / indexOfRefraction;
            }
            origin = rayPayload.position;
            vec3 oldDirection = direction;
            direction = refract(direction, refrNormal, refrEta);
            if (length(direction) < Bias) {
                direction = oldDirection;
            }
        } else {
            break;
        }
    }

    color = linearToSRGB(color);
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 0.0));
}
