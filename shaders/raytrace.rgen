#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_GOOGLE_include_directive : enable

#include "definitions.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;
layout(binding = 2, set = 0) uniform CameraProperties {
    mat4 viewInverse;
    mat4 projInverse;
}
cameraProperties;

layout(location = ColorPayloadIndex) rayPayloadEXT RayPayload rayPayload;

vec3 linearToSRGB(vec3 linear) {
    bvec3 cutoff = lessThan(linear, vec3(0.0031308));
    vec3 higher = vec3(1.055) * pow(linear, vec3(1.0 / 2.4)) - vec3(0.055);
    vec3 lower = linear * vec3(12.92);

    return mix(higher, lower, cutoff);
}

void main() {
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;

    vec3 origin = (cameraProperties.viewInverse * vec4(0, 0, 0, 1)).xyz;
    vec4 target = cameraProperties.projInverse * vec4(d.x, d.y, 1, 1);
    vec3 direction = (cameraProperties.viewInverse * vec4(normalize(target.xyz), 0)).xyz;

    rayPayload.color = vec3(0.0f);
    rayPayload.depth = 0;

    traceRayEXT(
        topLevelAS,
        gl_RayFlagsOpaqueEXT,
        AllMask,
        DefaultSBTOffset,
        DefaultSBTStride,
        ColorMissIndex,
        origin,
        TMin,
        direction,
        TMax,
        ColorPayloadIndex);

    const vec3 color = linearToSRGB(rayPayload.color);
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 0.0));
}
