#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable
#extension GL_EXT_scalar_block_layout : enable

#include "definitions.glsl"
#include "equirectangularProjection.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba16f) uniform image2DArray image;
layout(binding = 2, set = 0, scalar) uniform ProbeGridProperties {
    vec3 origin;
    vec3 size;
    uvec3 dimensions;
    uint resolution;
}
probeGridProperties;

layout(location = ColorPayloadIndex) rayPayloadEXT ProbeRayPayload rayPayload;

void main() {
    uvec3 probeId = uvec3(
        gl_LaunchIDEXT.x / probeGridProperties.resolution,
        gl_LaunchIDEXT.y / probeGridProperties.resolution,
        gl_LaunchIDEXT.z);

    uvec2 pixelId = uvec2(
        gl_LaunchIDEXT.x % probeGridProperties.resolution,
        gl_LaunchIDEXT.y % probeGridProperties.resolution);

    vec3 probeDistance = probeGridProperties.size / vec3(probeGridProperties.dimensions);
    vec3 probeOrigin = probeGridProperties.origin + probeDistance * vec3(probeId);

    const vec2 uv = vec2(pixelId) / vec2(probeGridProperties.resolution);

    vec3 origin = probeOrigin;
    vec3 direction = equirectangularToCartesian(uv);

    rayPayload.color = vec3(0.0f);
    rayPayload.rayDepth = 0.0f;
    rayPayload.depth = 0;

    traceRayEXT(
        topLevelAS,
        gl_RayFlagsOpaqueEXT,
        OpaqueMask,
        DefaultSBTOffset,
        DefaultSBTStride,
        ColorMissIndex,
        origin,
        TMin,
        direction,
        TMax,
        ColorPayloadIndex);

    const vec3 color = rayPayload.color;
    const float depth = rayPayload.rayDepth;
    imageStore(image, ivec3(gl_LaunchIDEXT), vec4(color, depth));
}
